# Configuration Spring Boot pour l'environnement Docker
spring.application.name=ecodeli-backend

# Configuration PostgreSQL pour Docker
# Les variables d'environnement seront injectées par Docker Compose
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://ecodeli-db:5432/ecodeli_db}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:cnpk684r}
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuration du pool de connexions
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

# Configuration du serveur
server.port=${SERVER_PORT:8080}
server.servlet.context-path=/

# Configuration des logs
logging.level.org.springframework=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK:INFO}
logging.level.com.ecodeli=${LOGGING_LEVEL_COM_ECODELI:DEBUG}
logging.level.org.hibernate.SQL=${LOGGING_LEVEL_HIBERNATE_SQL:DEBUG}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Fichier de logs
logging.file.name=/app/logs/ecodeli-backend.log
logging.file.max-size=10MB
logging.file.max-history=30

# Configuration de la console
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Configuration CORS pour Docker
# Permettre les requêtes depuis les conteneurs frontend
spring.web.cors.allowed-origins=http://localhost:3000,http://localhost:3001,http://ecodeli-frontoffice,http://ecodeli-backoffice
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# Configuration Spring Boot Actuator pour monitoring
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always
management.health.db.enabled=true

# Configuration de sécurité
spring.security.require-ssl=false

# Configuration JSON
spring.jackson.serialization.indent-output=true
spring.jackson.serialization.write-dates-as-timestamps=false

# Configuration de la timezone
spring.jackson.time-zone=Europe/Paris
