#!/bin/bash

# Script de d√©marrage rapide pour EcoDeli Docker
# Auteur: Tom Georgin
# Projet: EcoDeli PA2 ESGI 2024-2025

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${GREEN}"
    echo "üê≥ ======================================="
    echo "   EcoDeli - Conteneurisation Docker"
    echo "   Projet PA2 ESGI 2024-2025"
    echo "=======================================${NC}"
    echo ""
}

# V√©rification des pr√©requis
check_requirements() {
    print_info "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
        print_error "Docker Compose n'est pas disponible. Veuillez l'installer."
        exit 1
    fi
    
    print_success "Pr√©requis valid√©s"
}

# Cr√©ation des r√©pertoires n√©cessaires
create_directories() {
    print_info "Cr√©ation des r√©pertoires de volumes..."
    
    mkdir -p docker-volumes/postgres-logs
    mkdir -p docker-volumes/backend-logs
    
    print_success "R√©pertoires cr√©√©s"
}

# Configuration de l'environnement
setup_environment() {
    if [ ! -f ".env" ]; then
        print_warning "Fichier .env non trouv√©. Cr√©ation depuis .env.example..."
        cp .env.example .env
        print_info "√âditez le fichier .env pour adapter la configuration √† votre environnement"
        print_warning "IMPORTANT: Changez le mot de passe PostgreSQL en production!"
    else
        print_success "Fichier .env trouv√©"
    fi
}

# Affichage du menu
show_menu() {
    echo ""
    print_info "Choisissez l'environnement √† d√©marrer:"
    echo "1) üîß D√©veloppement (avec hot reload)"
    echo "2) üöÄ Production (optimis√©)"
    echo "3) üõë Arr√™ter tous les services"
    echo "4) üßπ Nettoyer (containers, images, volumes)"
    echo "5) üìä Voir le statut des services"
    echo "6) üìã Voir les logs"
    echo "7) ‚ùì Aide"
    echo "8) üö™ Quitter"
    echo ""
}

# D√©marrage en d√©veloppement
start_development() {
    print_info "D√©marrage de l'environnement de d√©veloppement..."
    
    # Arr√™t des services existants
    docker compose -f docker-compose.dev.yml down 2>/dev/null || true
    
    # D√©marrage des services
    docker compose -f docker-compose.dev.yml up -d
    
    echo ""
    print_success "Services d√©marr√©s en mode d√©veloppement!"
    echo ""
    echo "üåê URLs d'acc√®s:"
    echo "   ‚Ä¢ Frontend Frontoffice: http://localhost:3000"
    echo "   ‚Ä¢ Frontend Backoffice:  http://localhost:3001"
    echo "   ‚Ä¢ API Backend:          http://localhost:8080"
    echo "   ‚Ä¢ Base de donn√©es:      localhost:5432"
    echo ""
    print_info "Pour voir les logs: docker compose -f docker-compose.dev.yml logs -f"
}

# D√©marrage en production
start_production() {
    print_info "D√©marrage de l'environnement de production..."
    
    # Arr√™t des services existants
    docker compose -f docker-compose.prod.yml down 2>/dev/null || true
    
    # Construction et d√©marrage des services
    docker compose -f docker-compose.prod.yml up -d --build
    
    echo ""
    print_success "Services d√©marr√©s en mode production!"
    echo ""
    echo "üåê URLs d'acc√®s:"
    echo "   ‚Ä¢ Frontend Frontoffice: http://localhost:3000"
    echo "   ‚Ä¢ Frontend Backoffice:  http://localhost:3001"
    echo "   ‚Ä¢ API Backend:          http://localhost:8080"
    echo ""
    print_info "Pour voir les logs: docker compose -f docker-compose.prod.yml logs -f"
}

# Arr√™t des services
stop_services() {
    print_info "Arr√™t de tous les services..."
    
    docker compose -f docker-compose.dev.yml down 2>/dev/null || true
    docker compose -f docker-compose.prod.yml down 2>/dev/null || true
    
    print_success "Tous les services ont √©t√© arr√™t√©s"
}

# Nettoyage
cleanup() {
    print_warning "‚ö†Ô∏è  ATTENTION: Cette action va supprimer tous les conteneurs, images et volumes Docker!"
    echo "Cela inclut TOUTES les donn√©es de la base de donn√©es."
    echo ""
    read -p "√ätes-vous s√ªr de vouloir continuer? (y/N): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_info "Nettoyage en cours..."
        
        # Arr√™t des services
        stop_services
        
        # Suppression des ressources sp√©cifiques au projet
        docker volume ls -q | grep ecodeli | xargs -r docker volume rm
        docker network ls -q | grep ecodeli | xargs -r docker network rm
        
        # Nettoyage g√©n√©ral
        docker system prune -a --volumes -f
        
        print_success "Nettoyage termin√©"
    else
        print_info "Nettoyage annul√©"
    fi
}

# Statut des services
show_status() {
    print_info "Statut des services:"
    echo ""
    
    echo "üîß D√©veloppement:"
    docker compose -f docker-compose.dev.yml ps 2>/dev/null || echo "   Aucun service en cours d'ex√©cution"
    
    echo ""
    echo "üöÄ Production:"
    docker compose -f docker-compose.prod.yml ps 2>/dev/null || echo "   Aucun service en cours d'ex√©cution"
}

# Logs des services
show_logs() {
    echo ""
    print_info "Choisissez l'environnement pour voir les logs:"
    echo "1) D√©veloppement"
    echo "2) Production"
    echo ""
    read -p "Votre choix (1-2): " log_choice
    
    case $log_choice in
        1)
            print_info "Logs de d√©veloppement (Ctrl+C pour quitter):"
            docker compose -f docker-compose.dev.yml logs -f
            ;;
        2)
            print_info "Logs de production (Ctrl+C pour quitter):"
            docker compose -f docker-compose.prod.yml logs -f
            ;;
        *)
            print_error "Choix invalide"
            ;;
    esac
}

# Affichage de l'aide
show_help() {
    echo ""
    print_info "Aide - Commandes Docker utiles:"
    echo ""
    echo "üìã Commandes de base:"
    echo "   docker compose -f docker-compose.dev.yml up -d     # D√©marrer en d√©veloppement"
    echo "   docker compose -f docker-compose.prod.yml up -d    # D√©marrer en production"
    echo "   docker compose -f docker-compose.dev.yml down      # Arr√™ter les services"
    echo ""
    echo "üîç Monitoring:"
    echo "   docker compose ps                                  # Statut des conteneurs"
    echo "   docker compose logs -f [service]                   # Logs en temps r√©el"
    echo "   docker stats                                       # Statistiques des conteneurs"
    echo ""
    echo "üõ†Ô∏è  Maintenance:"
    echo "   docker compose up --build                          # Reconstruire les images"
    echo "   docker system prune -a                             # Nettoyer le syst√®me"
    echo ""
    print_info "Pour plus d'informations, consultez DOCKER-README.md"
}

# Programme principal
main() {
    print_header
    
    # V√©rifications initiales
    check_requirements
    create_directories
    setup_environment
    
    # Boucle du menu principal
    while true; do
        show_menu
        read -p "Votre choix (1-8): " choice
        
        case $choice in
            1)
                start_development
                ;;
            2)
                start_production
                ;;
            3)
                stop_services
                ;;
            4)
                cleanup
                ;;
            5)
                show_status
                ;;
            6)
                show_logs
                ;;
            7)
                show_help
                ;;
            8)
                print_success "Au revoir!"
                exit 0
                ;;
            *)
                print_error "Choix invalide. Veuillez choisir entre 1 et 8."
                ;;
        esac
        
        echo ""
        read -p "Appuyez sur Entr√©e pour continuer..."
    done
}

# Ex√©cution du script
main "$@"
