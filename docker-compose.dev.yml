# docker compose -f docker-compose.dev.yml up

version: '3.8'

services:
  # BASE DE DONNÉES POSTGRESQL
  ecodeli-db:
    image: postgres:15-alpine
    container_name: ecodeli-db-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ecodeli_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cnpk684r}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-volumes/postgres-logs:/var/log/postgresql
    networks:
      - ecodeli-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ecodeli_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # BACKEND API SPRING BOOT
  ecodeli-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: ecodeli-backend-dev
    restart: unless-stopped
    depends_on:
      ecodeli-db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      SPRING_DATASOURCE_URL: jdbc:postgresql://ecodeli-db:5432/${POSTGRES_DB:-ecodeli_db}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-cnpk684r}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${SPRING_JPA_HIBERNATE_DDL_AUTO:-update}
      SPRING_JPA_SHOW_SQL: ${SPRING_JPA_SHOW_SQL:-true}
      SERVER_PORT: ${SERVER_PORT:-8080}
      JAVA_OPTS: ${JAVA_OPTS:--Xmx512m -Xms256m}
      # Variables email
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD}
      SPRING_MAIL_SMTP_AUTH: ${SPRING_MAIL_SMTP_AUTH}
      SPRING_MAIL_SMTP_STARTTLS_ENABLE: ${SPRING_MAIL_SMTP_STARTTLS_ENABLE}
      SPRING_MAIL_SMTP_STARTTLS_REQUIRED: ${SPRING_MAIL_SMTP_STARTTLS_REQUIRED}
      ECODELI_EMAIL_ENABLED: ${ECODELI_EMAIL_ENABLED}
      # Variables JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      # Hot reload pour le développement - Code source
      - ./backend/src:/app/src
      - ./backend/pom.xml:/app/pom.xml
      - backend_logs:/app/logs
      # Volume pour les uploads
      - ./backend/uploads:/app/uploads
    networks:
      - ecodeli-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # FRONTEND FRONTOFFICE
  ecodeli-frontoffice:
    build:
      context: ./frontend/ecodeli-frontoffice
      dockerfile: Dockerfile
      target: development
    container_name: ecodeli-frontoffice-dev
    restart: unless-stopped
    depends_on:
      - ecodeli-backend
    environment:
      NODE_ENV: development
      # Pas d'URL API externe, on utilise le proxy Vite
    ports:
      - "3000:5173"
    volumes:
      # Hot reload pour le développement
      - ./frontend/ecodeli-frontoffice/src:/app/src
      - ./frontend/ecodeli-frontoffice/public:/app/public
      - /app/node_modules
    networks:
      - ecodeli-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # FRONTEND BACKOFFICE
  ecodeli-backoffice:
    build:
      context: ./frontend/ecodeli-backoffice
      dockerfile: Dockerfile
      target: development
    container_name: ecodeli-backoffice-dev
    restart: unless-stopped
    depends_on:
      - ecodeli-backend
    environment:
      NODE_ENV: development
      # Pas d'URL API externe, on utilise le proxy Vite
    ports:
      - "3001:5173"
    volumes:
      # Hot reload pour le développement
      - ./frontend/ecodeli-backoffice/src:/app/src
      - ./frontend/ecodeli-backoffice/public:/app/public
      - /app/node_modules
    networks:
      - ecodeli-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# RÉSEAUX
networks:
  ecodeli-network:
    driver: bridge
    name: ecodeli-network

# VOLUMES
volumes:
  postgres_data:
    driver: local
    name: ecodeli_postgres_data
  backend_logs:
    driver: local
    name: ecodeli_backend_logs
