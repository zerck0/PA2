# Docker Compose pour l'environnement de PRODUCTION
# Usage: docker compose -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # ===========================================
  # BASE DE DONNÉES POSTGRESQL
  # ===========================================
  ecodeli-db:
    image: postgres:15-alpine
    container_name: ecodeli-db-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ecodeli_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    # Port non exposé en production pour la sécurité
    # ports:
    #   - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-volumes/postgres-logs:/var/log/postgresql
    networks:
      - ecodeli-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ecodeli_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # ===========================================
  # BACKEND API SPRING BOOT
  # ===========================================
  ecodeli-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: ecodeli-backend-prod
    restart: always
    depends_on:
      ecodeli-db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://ecodeli-db:5432/${POSTGRES_DB:-ecodeli_db}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SERVER_PORT: 8080
      JAVA_OPTS: "-Xmx1024m -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication"
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: WARN
      LOGGING_LEVEL_COM_ECODELI: INFO
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - backend_logs:/app/logs:rw
    networks:
      - ecodeli-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ===========================================
  # FRONTEND FRONTOFFICE
  # ===========================================
  ecodeli-frontoffice:
    build:
      context: ./frontend/ecodeli-frontoffice
      dockerfile: Dockerfile
      target: runtime
    container_name: ecodeli-frontoffice-prod
    restart: always
    depends_on:
      - ecodeli-backend
    environment:
      NODE_ENV: production
    ports:
      - "${FRONTOFFICE_PORT:-3000}:80"
    networks:
      - ecodeli-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # ===========================================
  # FRONTEND BACKOFFICE
  # ===========================================
  ecodeli-backoffice:
    build:
      context: ./frontend/ecodeli-backoffice
      dockerfile: Dockerfile
      target: runtime
    container_name: ecodeli-backoffice-prod
    restart: always
    depends_on:
      - ecodeli-backend
    environment:
      NODE_ENV: production
    ports:
      - "${BACKOFFICE_PORT:-3001}:80"
    networks:
      - ecodeli-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

# ===========================================
# RÉSEAUX
# ===========================================
networks:
  ecodeli-network:
    driver: bridge
    name: ecodeli-network-prod
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===========================================
# VOLUMES
# ===========================================
volumes:
  postgres_data:
    driver: local
    name: ecodeli_postgres_data_prod
  backend_logs:
    driver: local
    name: ecodeli_backend_logs_prod
