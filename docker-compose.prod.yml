# Docker Compose pour l'environnement de PRODUCTION
# Usage: docker compose -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # ===========================================
  # BASE DE DONNÉES POSTGRESQL
  # ===========================================
  ecodeli-db:
    image: postgres:15-alpine
    container_name: ecodeli-db-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    # Pas d'exposition de port en production (sécurité)
    expose:
      - "5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - ecodeli-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===========================================
  # BACKEND API SPRING BOOT
  # ===========================================
  ecodeli-backend:
    image: zercko/ecodeli-backend:1.0
    container_name: ecodeli-backend-prod
    restart: always
    depends_on:
      ecodeli-db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://ecodeli-db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SERVER_PORT: 8080
      JAVA_OPTS: -Xmx1g -Xms512m -XX:+UseG1GC
      # Variables email sécurisées
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD}
      SPRING_MAIL_SMTP_AUTH: ${SPRING_MAIL_SMTP_AUTH}
      SPRING_MAIL_SMTP_STARTTLS_ENABLE: ${SPRING_MAIL_SMTP_STARTTLS_ENABLE}
      SPRING_MAIL_SMTP_STARTTLS_REQUIRED: ${SPRING_MAIL_SMTP_STARTTLS_REQUIRED}
      ECODELI_EMAIL_ENABLED: ${ECODELI_EMAIL_ENABLED}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    ports:
      - "8080:8080"
    volumes:
      # Seulement les logs en production
      - backend_logs_prod:/app/logs
    networks:
      - ecodeli-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s

  # ===========================================
  # FRONTEND FRONTOFFICE
  # ===========================================
  ecodeli-frontoffice:
    image: zercko/ecodeli-frontoffice:1.0
    container_name: ecodeli-frontoffice-prod
    restart: always
    depends_on:
      - ecodeli-backend
    environment:
      NODE_ENV: production
    ports:
      - "3000:80"
    networks:
      - ecodeli-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===========================================
  # FRONTEND BACKOFFICE
  # ===========================================
  ecodeli-backoffice:
    image: zercko/ecodeli-backoffice:1.0
    container_name: ecodeli-backoffice-prod
    restart: always
    depends_on:
      - ecodeli-backend
    environment:
      NODE_ENV: production
    ports:
      - "3001:80"
    networks:
      - ecodeli-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

# ===========================================
# RÉSEAUX
# ===========================================
networks:
  ecodeli-network-prod:
    driver: bridge
    name: ecodeli-network-prod

# ===========================================
# VOLUMES
# ===========================================
volumes:
  postgres_data_prod:
    driver: local
    name: ecodeli_postgres_data_prod
  backend_logs_prod:
    driver: local
    name: ecodeli_backend_logs_prod
